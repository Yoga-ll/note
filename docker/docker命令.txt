启动docker
systemctl start docker

运行交互式的容器
docker run -i -t ubuntu:15.10 /bin/bash
-t: 在新容器内指定一个伪终端或终端。
-i: 允许你对容器内的标准输入 (STDIN) 进行交互。
-d:让容器在后台运行。
-P:将容器内部使用的网络端口映射到我们使用的主机上
exit 命令或者使用 CTRL+D 来退出容器

启动容器（后台模式）
docker run -d ubuntu:15.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"
docker run -itd --name ubuntu-test ubuntu /bin/bash

docker ps
输出详情介绍：
CONTAINER ID: 容器 ID。
IMAGE: 使用的镜像。
COMMAND: 启动容器时运行的命令。
CREATED: 容器的创建时间。
STATUS: 容器状态。
状态有7种：
created（已创建）
restarting（重启中）
running（运行中）
removing（迁移中）
paused（暂停）
exited（停止）
dead（死亡）
PORTS: 容器的端口信息和使用的连接类型（tcp\udp）。
NAMES: 自动分配的容器名称。

docker logs 命令，查看容器内的标准输出：

停止容器
docker stop <容器 ID>

重启容器
docker restart <容器 ID>
 
进入容器
docker exec
docker exec -it 243c32535da7 /bin/bash

导出和导入容器
docker export 1e560fca3906 > ubuntu.tar

导入容器快照
cat docker/ubuntu.tar | docker import - test/ubuntu:v1

删除容器
docker rm -f 1e560fca3906
清理掉所有处于终止状态的容器。
docker container prune

docker run -d -p 5000:5000 training/webapp python app.py

网络端口的快捷方式
docker port

查看WEB应用程序容器的进程
docker top

检查 WEB 应用程序
docker inspect

删除镜像
docker rmi hello-world

更新镜像
更新镜像之前，我们需要使用镜像来创建一个容器。
docker run -t -i ubuntu:15.10 /bin/bash
在运行的容器内使用 apt-get update 命令进行更新。
在完成操作之后，输入 exit 命令来退出这个容器。
我们可以通过命令 docker commit 来提交容器副本。
docker commit -m="has update" -a="runoob" e218edb10161 runoob/ubuntu:v2
-m: 提交的描述信息
-a: 指定镜像作者
e218edb10161：容器 ID
runoob/ubuntu:v2: 指定要创建的目标镜像名


构建镜像
docker build -t nginx:test .

Dockerfile 文件
FROM java:8
ADD demo-0.0.1-SNAPSHOT.jar app.jar
EXPOSE 8080
ENTRYPOINT ["java","-jar","/app.jar"]
